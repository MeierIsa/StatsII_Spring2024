demo ()
Nile
plot (Nile)
x<-c(1:10)
y <- x + 11
y <- c(x, 11)
y <- c(x, 11)
xMean <- mean(x)
xLength <- length(x)
xDevSq <- xDev^2
xSumDevSq <- sum(xDevSq)
xVar <- xSumDevSq/xLength
xSD <- sqrt(xVar)
sd(x)
xVar_s <- xSumDevSq/(xLength - 1)
search()
install.packages("tidyverse")
library("tidyverse")
search()
help(tidyverse)
example(persp)
?mtcars
summary(mtcars)
summary(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
getwd()
?setwd()
?setwd()
4+4
b<-4
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
library(IRkernel)
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
n <- length(y)
pdf("plot_example.pdf")
plot(expenditure$X1, expenditure$Y)
dev.off()
plot(expenditure$X1, expenditure$Y)
dev.off()
library(tidyverse)
library(stargazer)
5bdc8e1c.bf11.4f49.9272.655d42bdfde8_Series...Metadata <- read.csv("~/Desktop/Stats_Spring2024/P_Data_Extract_From_World_Development_Indicators/5bdc8e1c-bf11-4f49-9272-655d42bdfde8_Series - Metadata.csv", header=FALSE, comment.char="#")
data <- read_csv("/Users/isabellameier/Desktop/Stats_Spring2024/P_Data_Extract_From_World_Development_Indicators/5bdc8e1c-bf11-4f49-9272-655d42bdfde8_Series - Metadata.csv")
head(data)
data <- read_csv("/Users/isabellameier/Desktop/Stats_Spring2024/P_Data_Extract_From_World_Development_Indicators/5bdc8e1c-bf11-4f49-9272-655d42bdfde8_Data.csv")
head(data)
tail(data)
data <- read_csv("/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials/tutorial01/tutorial1_data.csv")
head(data)
tail(data)
data['Time Code']
data['Country Name']
# 2. Let's drop the rows and columns we don't need.
# We only have one year, so the two cols related to year can be dropped; also, we only
# really need one col for country name, so let's drop country code too.
data_minus <- data[,-1]
print(data_minus)
# 2. Let's drop the rows and columns we don't need.
# We only have one year, so the two cols related to year can be dropped; also, we only
# really need one col for country name, so let's drop country code too.
data_minus <- data[,!names(data) %in% c('Time', 'Time Code', 'Country Code')]
print(data_minus)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials/tutorial08_MultinomialRegression.R")
lapply(c(),  pkgTest)
setwd("/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials/tutorial08_MultinomialRegression.R")
setwd("/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials/tutorial08_MultinomialRegression.R")
setwd('/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials/tutorial08_MultinomialRegression.R')
setwd('/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials')
workingMoms <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/WorkingMoms.txt", header=T)
summary(workingMoms)
##############
# Tutorial 5 Ordered and Multinomial Logistic Regression #
##############
setwd('/Users/isabellameier/Documents/GitHub/StatsII_Spring2024/tutorials')
library(MASS)
library(nnet)
library(ggplot2)
# EDA
summary(workingMoms)
ftable(xtabs(~ gender + year + attitude, data = workingMoms))
# do some wrangling
workingMoms$attitude <- factor(workingMoms$attitude,
levels = c("SD", "D", "A", "SA"),
labels = c("Strongly Disagree",
"Disagree",
"Agree",
"Strongly Agree"))
workingMoms$gender <- as.factor(workingMoms$gender)
workingMoms$race <- factor(workingMoms$race,
levels = c(0,1),
labels = c("Non-white", "White"))
workingMoms$year <- factor(workingMoms$year,
levels = c("Year1977", "Year1989"),
labels = c("1977", "1989"))
ftable(xtabs(~ gender + year + attitude, data = workingMoms))
ggplot(workingMoms, aes(attitude, prestige)) +
geom_boxplot() +
geom_jitter(alpha = 0.3) +
scale_x_discrete(labels=function(x){sub("\\s", "\n", x)}) +
theme(axis.text.x = element_text(angle = 45)) +
facet_grid(gender ~ year)
View(workingMoms)
ord.log <- polr(attitude ~ ., data = workingMoms, Hess = TRUE)
summary(ord.log)
# IM the last interceot should always be the highest
# Calculate a p value
ctable <- coef(summary(ord.log))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
(ctable <- cbind(ctable, "p value" = p))
# Calculate confidence intervals
(ci <- confint(ord.log))
# convert to odds ratio
exp(cbind(OR = coef(ord.log), ci))
# b) fit a multinomial logit model
# set a reference level for the outcome
# how to set a reference category either by using one of the extremes (2nd) or driven
# by theory (1st prefered) or yet to choose the category with the highest references (3rd) but never
# use the category with very low references
workingMoms$attitude <- relevel(workingMoms$attitude, ref = "Strongly Disagree")
# run model
mult.log <- multinom(attitude ~ ., data = workingMoms)
summary(mult.log)
exp(coef(mult.log))
# get p values
z <- summary(mult.log)$coefficients/summary(mult.log)$standard.errors
(p <- (1 - pnorm(abs(z), 0, 1)) * 2)
# we can use predicted probabilities to help our interpretation
pp <- data.frame(fitted(mult.log))
head(data.frame(attitude = workingMoms$attitude,
SD = pp$Strongly.Disagree,
D = pp$Disagree,
A = pp$Agree,
SA = pp$Strongly.Agree))
# c) Consider gender as an interaction
mult.log.int <- multinom(attitude ~ gender * ., data = workingMoms)
summary(mult.log.int)
z.int <- summary(mult.log.int)$coefficients/summary(mult.log.int)$standard.errors
(p.int <- (1 - pnorm(abs(z.int), 0, 1)) * 2)
pp.int <- data.frame(fitted(mult.log))
head(data.frame(attitude = workingMoms$attitude,
SD = pp.int$Strongly.Disagree,
D = pp.int$Disagree,
A = pp.int$Agree,
SA = pp.int$Strongly.Agree))
View(pp.int)
